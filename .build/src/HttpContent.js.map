{
  "version": 3,
  "sources": ["../../src/HttpContent.ts"],
  "sourcesContent": ["\nimport { ContentType, ContentDisposition, Header, parseHeaders, parseContentType, parseContentDisposition, isMultipartMediaType } from './headers';\nimport { MultipartParser } from './multipart';\nimport { Data, DataSource } from './data';\n\nexport abstract class HttpContent {\n    constructor(\n        public headers: Header[],\n        public contentType: ContentType | undefined,\n        public contentDisposition: ContentDisposition | undefined\n    ) {\n    }\n\n    static async fromXHRResponse(xhr: XMLHttpRequest): Promise<HttpContent> {\n        const headers = parseHeaders({\n            headerString: xhr.getAllResponseHeaders()\n        }).headers;\n\n        return HttpContent.from(headers, xhr.response);\n    }\n\n    static async from(headers: Header[], content: DataSource) {\n\n        const contentTypeIndex = headers.findIndex(x => x.name === 'content-type');\n        const contentDispositionIndex = headers.findIndex(x => x.name === 'content-disposition');\n\n        const contentType = contentTypeIndex >= 0 ?\n            parseContentType(headers[contentTypeIndex].value) :\n            undefined;\n        const contentDisposition = contentDispositionIndex >= 0 ?\n            parseContentDisposition(headers[contentDispositionIndex].value) :\n            undefined;\n\n        const data = new Data(content, contentType?.charset);\n\n        if (isMultipartMediaType(contentType?.mediaType)) {\n            const parser = new MultipartParser();\n            const boundary = contentType?.boundary;\n            if (boundary === undefined) {\n                throw new Error('No boundary found.');\n            }\n\n            const parsed = parser.parseDataView(boundary, (await data.dataView()).value);\n\n            return new MultipartHttpContent(\n                headers,\n                contentType,\n                contentDisposition,\n                parsed.parts.map(x => {\n                    return new SingularHttpContent(\n                        x.headers,\n                        x.contentType,\n                        x.contentDisposition,\n                        new Data(x.content, x.contentType?.mediaType)\n                    );\n                })\n            );\n        }\n        else {\n            return new SingularHttpContent(\n                headers,\n                contentType,\n                contentDisposition,\n                data\n            );\n        }\n    }\n}\n\nexport class SingularHttpContent extends HttpContent {\n    constructor(\n        headers: Header[],\n        contentType: ContentType | undefined,\n        contentDisposition: ContentDisposition | undefined,\n        public data: Data\n    ) {\n        super(headers, contentType, contentDisposition);\n    }\n}\n\nexport class MultipartHttpContent extends HttpContent {\n    constructor(\n        headers: Header[],\n        contentType: ContentType | undefined,\n        contentDisposition: ContentDisposition | undefined,\n        public parts: SingularHttpContent[]\n    ) {\n        super(headers, contentType, contentDisposition);\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,qBAAuI;AACvI,uBAAgC;AAChC,kBAAiC;AAE1B,kBAA2B;AAAA,EAC9B,YACW,SACA,aACA,oBACT;AAHS;AACA;AACA;AAAA;AAAA,eAIE,gBAAgB,KAA2C;AACpE,UAAM,UAAU,iCAAa;AAAA,MACzB,cAAc,IAAI;AAAA,OACnB;AAEH,WAAO,YAAY,KAAK,SAAS,IAAI;AAAA;AAAA,eAG5B,KAAK,SAAmB,SAAqB;AAEtD,UAAM,mBAAmB,QAAQ,UAAU,OAAK,EAAE,SAAS;AAC3D,UAAM,0BAA0B,QAAQ,UAAU,OAAK,EAAE,SAAS;AAElE,UAAM,cAAc,oBAAoB,IACpC,qCAAiB,QAAQ,kBAAkB,SAC3C;AACJ,UAAM,qBAAqB,2BAA2B,IAClD,4CAAwB,QAAQ,yBAAyB,SACzD;AAEJ,UAAM,OAAO,IAAI,iBAAK,SAAS,2CAAa;AAE5C,QAAI,yCAAqB,2CAAa,YAAY;AAC9C,YAAM,SAAS,IAAI;AACnB,YAAM,WAAW,2CAAa;AAC9B,UAAI,aAAa,QAAW;AACxB,cAAM,IAAI,MAAM;AAAA;AAGpB,YAAM,SAAS,OAAO,cAAc,UAAW,OAAM,KAAK,YAAY;AAEtE,aAAO,IAAI,qBACP,SACA,aACA,oBACA,OAAO,MAAM,IAAI,OAAK;AAhDtC;AAiDoB,eAAO,IAAI,oBACP,EAAE,SACF,EAAE,aACF,EAAE,oBACF,IAAI,iBAAK,EAAE,SAAS,QAAE,gBAAF,mBAAe;AAAA;AAAA,WAK9C;AACD,aAAO,IAAI,oBACP,SACA,aACA,oBACA;AAAA;AAAA;AAAA;AAMT,kCAAkC,YAAY;AAAA,EACjD,YACI,SACA,aACA,oBACO,MACT;AACE,UAAM,SAAS,aAAa;AAFrB;AAAA;AAAA;AAMR,mCAAmC,YAAY;AAAA,EAClD,YACI,SACA,aACA,oBACO,OACT;AACE,UAAM,SAAS,aAAa;AAFrB;AAAA;AAAA;",
  "names": []
}
