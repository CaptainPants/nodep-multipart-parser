{
  "version": 3,
  "sources": ["../../../src/headers/parseContentType.test.ts"],
  "sourcesContent": ["import { describe, expect, test } from '@jest/globals';\nimport { ParseError } from '..';\n\nimport { parseContentType, __testing } from './parseContentType';\n\ndescribe('parseContentType', () => {\n    test('image/png', () => {\n        const res = parseContentType('image/png');\n        expect(res.mediaType).toEqual('image/png');\n        expect(res.type).toEqual('image');\n        expect(res.subtype).toEqual('png');\n        expect(Object.keys(res.parameters).length === 0);\n    });\n\n    test('image', () => {\n        expect(() => parseContentType('image')).toThrow(ParseError);\n    });\n\n    test('text/json; encoding=utf-8', () => {\n        const res = parseContentType('text/json; encoding=utf-8');\n\n        expect(res.mediaType).toEqual('text/json');\n        expect(res.parameters).toEqual([{ name: \"encoding\", value: \"utf-8\" }]);\n    });\n\n    test('text/json; charset=utf-8 ; boundary=\"ham sandwich \\\\\"1\\\\\" 1234 \"', () => {\n        const res = parseContentType('text/json; charset=utf-8 ; boundary=\"ham sandwich \\\\\"1\\\\\" 1234 \"');\n\n        expect(res.mediaType).toEqual('text/json');\n        expect(res.parameters).toEqual([\n            { name: \"charset\", value: \"utf-8\" },\n            { name: \"boundary\", value: \"ham sandwich \\\"1\\\" 1234 \" }\n        ]);\n        expect(res.charset).toEqual(\"utf-8\");\n        expect(res.boundary).toEqual(\"ham sandwich \\\"1\\\" 1234 \");\n    });\n\n    test('text/json; charset=\"utf-8\"', () => {\n        const res = parseContentType('text/json; charset=\"utf-8\"');\n\n        expect(res.mediaType).toEqual('text/json');\n        expect(res.parameters).toEqual([{ name: \"charset\", value: \"utf-8\" }]);\n        expect(res.charset).toEqual(\"utf-8\");\n    });\n    test('text/json; charset=\"UTF-8\"', () => {\n        const res = parseContentType('text/json; charset=\"UTF-8\"');\n\n        expect(res.mediaType).toEqual('text/json');\n        expect(res.parameters).toEqual([{ name: \"charset\", value: \"UTF-8\" }]);\n        expect(res.charset).toEqual(\"utf-8\");\n    });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,qBAAuC;AACvC,eAA2B;AAE3B,8BAA4C;AAE5C,6BAAS,oBAAoB,MAAM;AAC/B,2BAAK,aAAa,MAAM;AACpB,UAAM,MAAM,8CAAiB;AAC7B,+BAAO,IAAI,WAAW,QAAQ;AAC9B,+BAAO,IAAI,MAAM,QAAQ;AACzB,+BAAO,IAAI,SAAS,QAAQ;AAC5B,+BAAO,OAAO,KAAK,IAAI,YAAY,WAAW;AAAA;AAGlD,2BAAK,SAAS,MAAM;AAChB,+BAAO,MAAM,8CAAiB,UAAU,QAAQ;AAAA;AAGpD,2BAAK,6BAA6B,MAAM;AACpC,UAAM,MAAM,8CAAiB;AAE7B,+BAAO,IAAI,WAAW,QAAQ;AAC9B,+BAAO,IAAI,YAAY,QAAQ,CAAC,EAAE,MAAM,YAAY,OAAO;AAAA;AAG/D,2BAAK,oEAAoE,MAAM;AAC3E,UAAM,MAAM,8CAAiB;AAE7B,+BAAO,IAAI,WAAW,QAAQ;AAC9B,+BAAO,IAAI,YAAY,QAAQ;AAAA,MAC3B,EAAE,MAAM,WAAW,OAAO;AAAA,MAC1B,EAAE,MAAM,YAAY,OAAO;AAAA;AAE/B,+BAAO,IAAI,SAAS,QAAQ;AAC5B,+BAAO,IAAI,UAAU,QAAQ;AAAA;AAGjC,2BAAK,8BAA8B,MAAM;AACrC,UAAM,MAAM,8CAAiB;AAE7B,+BAAO,IAAI,WAAW,QAAQ;AAC9B,+BAAO,IAAI,YAAY,QAAQ,CAAC,EAAE,MAAM,WAAW,OAAO;AAC1D,+BAAO,IAAI,SAAS,QAAQ;AAAA;AAEhC,2BAAK,8BAA8B,MAAM;AACrC,UAAM,MAAM,8CAAiB;AAE7B,+BAAO,IAAI,WAAW,QAAQ;AAC9B,+BAAO,IAAI,YAAY,QAAQ,CAAC,EAAE,MAAM,WAAW,OAAO;AAC1D,+BAAO,IAAI,SAAS,QAAQ;AAAA;AAAA;",
  "names": []
}
