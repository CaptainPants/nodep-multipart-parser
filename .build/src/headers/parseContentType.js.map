{
  "version": 3,
  "sources": ["../../../src/headers/parseContentType.ts"],
  "sourcesContent": ["\nimport { ParseError } from '..';\nimport { HeaderParserState, Parameters, processParametersIfPresent } from './internal';\nimport { isFinished, readToken } from './internal';\n\nexport interface ContentType {\n    mediaType: string;\n    type: string;\n    subtype: string;\n    parameters: Parameters;\n    boundary: string | undefined;\n    charset: string | undefined;\n}\n\nexport function parseContentType(header: string): ContentType {\n    const state: HeaderParserState = {\n        index: 0,\n        end: header.length,\n        string: header\n    };\n\n    const type: string = readToken(state);\n    if (isFinished(state)) {\n        throw new ParseError(\"Unexpected EOF when expecting '/'.\");\n    }\n    if (state.string[state.index] != '/') {\n        throw new ParseError(`Unexpected '${state.string[state.index]}' when expecting '/'.`);\n    }\n    ++state.index;\n    const subtype: string = readToken(state);\n\n    const parameters = processParametersIfPresent(state);\n\n    const boundaryIndex = parameters.findIndex(x => x.name == 'boundary');\n    const charsetIndex = parameters.findIndex(x => x.name == 'charset');\n\n    return {\n        mediaType: type + '/' + subtype,\n        type: type,\n        subtype: subtype,\n        parameters: parameters,\n        boundary: boundaryIndex >= 0 ? parameters[boundaryIndex].value : undefined,\n        charset: charsetIndex >= 0 ? parameters[charsetIndex].value.toLowerCase() : undefined\n    };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA,eAA2B;AAC3B,sBAA0E;AAC1E,uBAAsC;AAW/B,0BAA0B,QAA6B;AAC1D,QAAM,QAA2B;AAAA,IAC7B,OAAO;AAAA,IACP,KAAK,OAAO;AAAA,IACZ,QAAQ;AAAA;AAGZ,QAAM,OAAe,gCAAU;AAC/B,MAAI,iCAAW,QAAQ;AACnB,UAAM,IAAI,oBAAW;AAAA;AAEzB,MAAI,MAAM,OAAO,MAAM,UAAU,KAAK;AAClC,UAAM,IAAI,oBAAW,eAAe,MAAM,OAAO,MAAM;AAAA;AAE3D,IAAE,MAAM;AACR,QAAM,UAAkB,gCAAU;AAElC,QAAM,aAAa,gDAA2B;AAE9C,QAAM,gBAAgB,WAAW,UAAU,OAAK,EAAE,QAAQ;AAC1D,QAAM,eAAe,WAAW,UAAU,OAAK,EAAE,QAAQ;AAEzD,SAAO;AAAA,IACH,WAAW,OAAO,MAAM;AAAA,IACxB;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU,iBAAiB,IAAI,WAAW,eAAe,QAAQ;AAAA,IACjE,SAAS,gBAAgB,IAAI,WAAW,cAAc,MAAM,gBAAgB;AAAA;AAAA;",
  "names": []
}
