{
  "version": 3,
  "sources": ["../../../src/headers/parseHeaders.ts"],
  "sourcesContent": ["\nimport { ParseError } from '..';\nimport { consumeOptionalWhitespace, readOptionalToken, isSpace, isFinished, readToNextLine, HeaderParserState } from './internal';\n\nexport interface ParseHeadersParameters {\n    headerString: string;\n}\n\nexport interface ParseHeadersResult {\n    headers: Header[];\n}\n\nexport interface Header { name: string, value: string }\n\n\n/**\n  * Refer https://datatracker.ietf.org/doc/html/rfc7230#section-3.2\n  */\nexport function parseHeaders(params: ParseHeadersParameters): ParseHeadersResult {\n    const headerString = params.headerString ?? '';\n\n    const state: HeaderParserState = {\n        index: 0,\n        end: headerString.length,\n        string: headerString\n    };\n\n    const headers: Header[] = [];\n\n    for (; ;) {\n        const headerName = readOptionalToken(state);\n\n        if (!headerName) {\n            break;\n        }\n\n        if (isFinished(state)) {\n            throw new ParseError(`Expected :, found instead EOF.`);\n        }\n\n        const colon = state.string[state.index];\n        if (colon != ':') {\n            throw new ParseError(`Expected :, found instead '${colon}'.`);\n        }\n\n        // move past the :\n        state.index += 1;\n\n        consumeOptionalWhitespace(state);\n\n        let value = '';\n\n        if (!isFinished(state)) {\n            value += readToNextLine(state);\n\n            // handle obs-fold\n            while (!isFinished(state) && isSpace(state.string[state.index])) {\n                // replace obs-fold newline with a single space per \n                // https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.4\n                value += ' ';\n\n                value += readToNextLine(state);\n            }\n        }\n\n        headers.push({ name: headerName.toLowerCase(), value: value });\n    }\n\n    return {\n        headers: headers\n    };\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA,eAA2B;AAC3B,sBAAqH;AAgB9G,sBAAsB,QAAoD;AAC7E,QAAM,eAAe,OAAO,gBAAgB;AAE5C,QAAM,QAA2B;AAAA,IAC7B,OAAO;AAAA,IACP,KAAK,aAAa;AAAA,IAClB,QAAQ;AAAA;AAGZ,QAAM,UAAoB;AAE1B,aAAU;AACN,UAAM,aAAa,uCAAkB;AAErC,QAAI,CAAC,YAAY;AACb;AAAA;AAGJ,QAAI,gCAAW,QAAQ;AACnB,YAAM,IAAI,oBAAW;AAAA;AAGzB,UAAM,QAAQ,MAAM,OAAO,MAAM;AACjC,QAAI,SAAS,KAAK;AACd,YAAM,IAAI,oBAAW,8BAA8B;AAAA;AAIvD,UAAM,SAAS;AAEf,mDAA0B;AAE1B,QAAI,QAAQ;AAEZ,QAAI,CAAC,gCAAW,QAAQ;AACpB,eAAS,oCAAe;AAGxB,aAAO,CAAC,gCAAW,UAAU,6BAAQ,MAAM,OAAO,MAAM,SAAS;AAG7D,iBAAS;AAET,iBAAS,oCAAe;AAAA;AAAA;AAIhC,YAAQ,KAAK,EAAE,MAAM,WAAW,eAAe;AAAA;AAGnD,SAAO;AAAA,IACH;AAAA;AAAA;",
  "names": []
}
