{
  "version": 3,
  "sources": ["../../../src/headers/internal.test.ts"],
  "sourcesContent": ["import { describe, expect, test } from '@jest/globals';\n\nimport { isFinished, isAtCRLF, readToNextLine, readToken, consumeOptionalWhitespace, readQuoted, readOneParameter } from './internal';\n\ndescribe('isFinished', () => {\n    test('false 1', () => {\n        expect(isFinished({ index: 0, end: 10, string: 'abcdefghijk' })).toEqual(false);\n    });\n    test('true 1', () => {\n        expect(isFinished({ index: 10, end: 10, string: 'abcdefghijk' })).toEqual(true);\n    });\n    test('true 1', () => {\n        expect(isFinished({ index: 11, end: 10, string: 'abcdefghijk' })).toEqual(true);\n    });\n});\n\ndescribe('isAtCRLF', () => {\n    test('true 1', () => {\n        expect(isAtCRLF({ index: 0, end: 2, string: '\\r\\n' })).toEqual(true);\n    });\n    test('false 1', () => {\n        expect(isAtCRLF({ index: 1, end: 2, string: '\\r\\n' })).toEqual(false);\n    });\n    test('false 2', () => {\n        expect(isAtCRLF({ index: 0, end: 5, string: 'abcde' })).toEqual(false);\n    });\n});\n\ndescribe('readToNextLine', () => {\n    test('test 1', () => {\n        const input = 'test1 2 3 4\\r\\nbanana';\n        const res = readToNextLine({ index: 0, end: input.length, string: input });\n        expect(res).toEqual('test1 2 3 4');\n    });\n});\n\ndescribe('readToken', () => {\n    test('encoding=utf-8', () => {\n        const input = 'encoding=utf-8 ';\n        const res = readToken({ index: 0, end: input.length, string: input });\n        expect(res).toEqual('encoding');\n    });\n});\n\ndescribe('readQuoted', () => {\n    test('\"hello there \\\\x1 \\\\\" \"', () => {\n        const input = '\"hello there \\\\x1 \\\\\" \"';\n        const res = readQuoted({ index: 0, end: input.length, string: input });\n        expect(res).toEqual('hello there x1 \" ');\n    });\n});\n\ndescribe('consumeOptionalWhitespace', () => {\n    test('      =', () => {\n        const input = '      =';\n        const state = { index: 0, end: input.length, string: input };\n        consumeOptionalWhitespace(state);\n\n        expect(state).toEqual({ index: 6, end: 7, string: input });\n        expect(state.string[state.index]).toEqual('=');\n    });\n\n    test('word', () => {\n        const input = 'word';\n        const state = { index: 0, end: input.length, string: input };\n        consumeOptionalWhitespace(state);\n\n        expect(state).toEqual({ index: 0, end: input.length, string: input });\n        expect(state.string[state.index]).toEqual('w');\n    });\n});\n\n\ndescribe('readOneParameter', () => {\n    test('encoding=utf-8', () => {\n        const input = 'encoding=utf-8 ';\n        const parameters: { [key: string]: string } = {};\n        const res = readOneParameter({ index: 0, end: input.length, string: input });\n        const keys = Object.keys(parameters);\n\n        expect(res).toEqual({ name: \"encoding\", value: 'utf-8' });\n    });\n});"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,qBAAuC;AAEvC,sBAAyH;AAEzH,6BAAS,cAAc,MAAM;AACzB,2BAAK,WAAW,MAAM;AAClB,+BAAO,gCAAW,EAAE,OAAO,GAAG,KAAK,IAAI,QAAQ,kBAAkB,QAAQ;AAAA;AAE7E,2BAAK,UAAU,MAAM;AACjB,+BAAO,gCAAW,EAAE,OAAO,IAAI,KAAK,IAAI,QAAQ,kBAAkB,QAAQ;AAAA;AAE9E,2BAAK,UAAU,MAAM;AACjB,+BAAO,gCAAW,EAAE,OAAO,IAAI,KAAK,IAAI,QAAQ,kBAAkB,QAAQ;AAAA;AAAA;AAIlF,6BAAS,YAAY,MAAM;AACvB,2BAAK,UAAU,MAAM;AACjB,+BAAO,8BAAS,EAAE,OAAO,GAAG,KAAK,GAAG,QAAQ,WAAW,QAAQ;AAAA;AAEnE,2BAAK,WAAW,MAAM;AAClB,+BAAO,8BAAS,EAAE,OAAO,GAAG,KAAK,GAAG,QAAQ,WAAW,QAAQ;AAAA;AAEnE,2BAAK,WAAW,MAAM;AAClB,+BAAO,8BAAS,EAAE,OAAO,GAAG,KAAK,GAAG,QAAQ,YAAY,QAAQ;AAAA;AAAA;AAIxE,6BAAS,kBAAkB,MAAM;AAC7B,2BAAK,UAAU,MAAM;AACjB,UAAM,QAAQ;AACd,UAAM,MAAM,oCAAe,EAAE,OAAO,GAAG,KAAK,MAAM,QAAQ,QAAQ;AAClE,+BAAO,KAAK,QAAQ;AAAA;AAAA;AAI5B,6BAAS,aAAa,MAAM;AACxB,2BAAK,kBAAkB,MAAM;AACzB,UAAM,QAAQ;AACd,UAAM,MAAM,+BAAU,EAAE,OAAO,GAAG,KAAK,MAAM,QAAQ,QAAQ;AAC7D,+BAAO,KAAK,QAAQ;AAAA;AAAA;AAI5B,6BAAS,cAAc,MAAM;AACzB,2BAAK,2BAA2B,MAAM;AAClC,UAAM,QAAQ;AACd,UAAM,MAAM,gCAAW,EAAE,OAAO,GAAG,KAAK,MAAM,QAAQ,QAAQ;AAC9D,+BAAO,KAAK,QAAQ;AAAA;AAAA;AAI5B,6BAAS,6BAA6B,MAAM;AACxC,2BAAK,WAAW,MAAM;AAClB,UAAM,QAAQ;AACd,UAAM,QAAQ,EAAE,OAAO,GAAG,KAAK,MAAM,QAAQ,QAAQ;AACrD,mDAA0B;AAE1B,+BAAO,OAAO,QAAQ,EAAE,OAAO,GAAG,KAAK,GAAG,QAAQ;AAClD,+BAAO,MAAM,OAAO,MAAM,QAAQ,QAAQ;AAAA;AAG9C,2BAAK,QAAQ,MAAM;AACf,UAAM,QAAQ;AACd,UAAM,QAAQ,EAAE,OAAO,GAAG,KAAK,MAAM,QAAQ,QAAQ;AACrD,mDAA0B;AAE1B,+BAAO,OAAO,QAAQ,EAAE,OAAO,GAAG,KAAK,MAAM,QAAQ,QAAQ;AAC7D,+BAAO,MAAM,OAAO,MAAM,QAAQ,QAAQ;AAAA;AAAA;AAKlD,6BAAS,oBAAoB,MAAM;AAC/B,2BAAK,kBAAkB,MAAM;AACzB,UAAM,QAAQ;AACd,UAAM,aAAwC;AAC9C,UAAM,MAAM,sCAAiB,EAAE,OAAO,GAAG,KAAK,MAAM,QAAQ,QAAQ;AACpE,UAAM,OAAO,OAAO,KAAK;AAEzB,+BAAO,KAAK,QAAQ,EAAE,MAAM,YAAY,OAAO;AAAA;AAAA;",
  "names": []
}
