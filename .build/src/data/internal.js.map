{
  "version": 3,
  "sources": ["../../../src/data/internal.ts"],
  "sourcesContent": ["\n\n//TODO doc comment that this is always to utf-8\nexport function stringToArrayBuffer(\n    value: string\n): Promise<ArrayBuffer> {\n    if (TextEncoder) {\n        // The standard only requires utf-8\n        // so lets make it easy on ourselves and not offer options\n        return Promise.resolve(new TextEncoder().encode(value).buffer);\n    }\n    else {\n        return expensiveCompatibleStringToArrayBuffer(value);\n    }\n}\n\nexport function expensiveCompatibleStringToArrayBuffer(value: string): Promise<ArrayBuffer> {\n    // MDN says the blob constructor uses utf-8 TODO: cite url\n    return blobToArrayBuffer(new Blob([value]));\n}\n\nexport function expensiveCompativalBlobSourceToString(value: ArrayBuffer | DataView, encoding: string | undefined) {\n    return blobToString(new Blob([value]), encoding);\n}\n\n// TODO doc comment that this is always utf-8\nexport function blobToString(\n    blob: Blob,\n    sourceEncoding: string | undefined\n): Promise<string> {\n    return new Promise<string>(\n        (resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.addEventListener('error', _ => reject(new Error('Failed to decode text.')));\n            reader.addEventListener('error', _ => resolve(reader.result as string));\n\n            reader.readAsText(blob, sourceEncoding);\n        }\n    );\n}\n\nexport function blobToArrayBuffer(\n    blob: Blob\n) {\n    return new Promise<ArrayBuffer>(\n        (resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.addEventListener('error', _ => reject(new Error('Failed to decode text.')));\n            reader.addEventListener('error', _ => resolve(reader.result as ArrayBuffer));\n\n            reader.readAsArrayBuffer(blob);\n        }\n    );\n}"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGO,6BACH,OACoB;AACpB,MAAI,aAAa;AAGb,WAAO,QAAQ,QAAQ,IAAI,cAAc,OAAO,OAAO;AAAA,SAEtD;AACD,WAAO,uCAAuC;AAAA;AAAA;AAI/C,gDAAgD,OAAqC;AAExF,SAAO,kBAAkB,IAAI,KAAK,CAAC;AAAA;AAGhC,+CAA+C,OAA+B,UAA8B;AAC/G,SAAO,aAAa,IAAI,KAAK,CAAC,SAAS;AAAA;AAIpC,sBACH,MACA,gBACe;AACf,SAAO,IAAI,QACP,CAAC,SAAS,WAAW;AACjB,UAAM,SAAS,IAAI;AAEnB,WAAO,iBAAiB,SAAS,OAAK,OAAO,IAAI,MAAM;AACvD,WAAO,iBAAiB,SAAS,OAAK,QAAQ,OAAO;AAErD,WAAO,WAAW,MAAM;AAAA;AAAA;AAK7B,2BACH,MACF;AACE,SAAO,IAAI,QACP,CAAC,SAAS,WAAW;AACjB,UAAM,SAAS,IAAI;AAEnB,WAAO,iBAAiB,SAAS,OAAK,OAAO,IAAI,MAAM;AACvD,WAAO,iBAAiB,SAAS,OAAK,QAAQ,OAAO;AAErD,WAAO,kBAAkB;AAAA;AAAA;",
  "names": []
}
