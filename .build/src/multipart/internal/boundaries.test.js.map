{
  "version": 3,
  "sources": ["../../../../src/multipart/internal/boundaries.test.ts"],
  "sourcesContent": ["import { describe, expect, test } from \"@jest/globals\";\nimport { asciiToDataViewForTesting, chars, findBoundaryOffsets, getCharCodesForString, matchBoundary } from \".\";\n\ndescribe('findBoundaryOffsets', () => {\n    test('test1', () => {\n        const boundary = '9051914041544843365972754266';\n\n        const dataview = asciiToDataViewForTesting(`\n--9051914041544843365972754266\nContent-Disposition: form-data; name=\"file1\"; filename=\"a.html\"\n\ntest1\n--9051914041544843365972754266\nContent-Disposition: form-data; name=\"file2\"; filename=\"b.html\"\n\ntest2\n--9051914041544843365972754266--`); // string literals use \\n\n\n        const result = findBoundaryOffsets(getCharCodesForString(boundary), dataview);\n\n        expect(result).toEqual([\n            { start: 0, end: 34, length: 34, isLast: false },\n            { start: 106, end: 140, length: 34, isLast: false },\n            { start: 212, end: 246, length: 34, isLast: true }\n        ]);\n    });\n});\n\ndescribe('getCharCodes', () => {\n    test('abcdefg', () => {\n        const codes = getCharCodesForString('abcdefg');\n        expect(codes).toEqual([97, 98, 99, 100, 101, 102, 103]);\n    });\n});\n\ndescribe('matchBoundary', () => {\n    test('\\\\r\\\\n--a\\\\r\\\\n--aabcdefg', () => {\n        // aabcdefg\n        const bytes = [\n            chars.cr,\n            chars.lf,\n            chars.hyphen,\n            chars.hyphen,\n            97, // a\n            chars.cr,\n            chars.lf,\n            chars.hyphen,\n            chars.hyphen,\n            97, // b\n            98, // c\n            99, // d\n            100, // e\n            101, // f\n            102, // g\n            103, // h\n            chars.cr,\n            chars.lf\n        ];\n\n        const buffer = new ArrayBuffer(bytes.length);\n        const uint8 = new Uint8Array(buffer);\n        uint8.set(bytes, 0);\n\n        const boundary = getCharCodesForString('abcdefg');\n\n        const data = new DataView(buffer);\n        const res1 = matchBoundary(boundary, data, 0);\n        expect(res1).toEqual(undefined);\n\n        const res2 = matchBoundary(boundary, data, 5);\n        expect(res2).toEqual({ start: 5, end: 18, length: 13, isLast: false });\n    });\n});"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,qBAAuC;AACvC,eAA4G;AAE5G,6BAAS,uBAAuB,MAAM;AAClC,2BAAK,SAAS,MAAM;AAChB,UAAM,WAAW;AAEjB,UAAM,WAAW,wCAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW3C,UAAM,SAAS,kCAAoB,oCAAsB,WAAW;AAEpE,+BAAO,QAAQ,QAAQ;AAAA,MACnB,EAAE,OAAO,GAAG,KAAK,IAAI,QAAQ,IAAI,QAAQ;AAAA,MACzC,EAAE,OAAO,KAAK,KAAK,KAAK,QAAQ,IAAI,QAAQ;AAAA,MAC5C,EAAE,OAAO,KAAK,KAAK,KAAK,QAAQ,IAAI,QAAQ;AAAA;AAAA;AAAA;AAKxD,6BAAS,gBAAgB,MAAM;AAC3B,2BAAK,WAAW,MAAM;AAClB,UAAM,QAAQ,oCAAsB;AACpC,+BAAO,OAAO,QAAQ,CAAC,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK;AAAA;AAAA;AAI1D,6BAAS,iBAAiB,MAAM;AAC5B,2BAAK,6BAA6B,MAAM;AAEpC,UAAM,QAAQ;AAAA,MACV,eAAM;AAAA,MACN,eAAM;AAAA,MACN,eAAM;AAAA,MACN,eAAM;AAAA,MACN;AAAA,MACA,eAAM;AAAA,MACN,eAAM;AAAA,MACN,eAAM;AAAA,MACN,eAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,eAAM;AAAA,MACN,eAAM;AAAA;AAGV,UAAM,SAAS,IAAI,YAAY,MAAM;AACrC,UAAM,QAAQ,IAAI,WAAW;AAC7B,UAAM,IAAI,OAAO;AAEjB,UAAM,WAAW,oCAAsB;AAEvC,UAAM,OAAO,IAAI,SAAS;AAC1B,UAAM,OAAO,4BAAc,UAAU,MAAM;AAC3C,+BAAO,MAAM,QAAQ;AAErB,UAAM,OAAO,4BAAc,UAAU,MAAM;AAC3C,+BAAO,MAAM,QAAQ,EAAE,OAAO,GAAG,KAAK,IAAI,QAAQ,IAAI,QAAQ;AAAA;AAAA;",
  "names": []
}
