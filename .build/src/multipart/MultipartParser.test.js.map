{
  "version": 3,
  "sources": ["../../../src/multipart/MultipartParser.test.ts"],
  "sourcesContent": ["\nimport { describe, expect, test } from '@jest/globals';\nimport { asciiToDataViewForTesting, getAsciiStringFromDataView, getCharCodesForString } from './internal';\nimport { MultipartParser, __testing } from \"./MultipartParser\";\n\ndescribe('parse', () => {\n    test('example1', () => {\n        const boundary = '9051914041544843365972754266';\n\n        const dataview = asciiToDataViewForTesting(`\n--9051914041544843365972754266\nContent-Disposition: form-data; name=\"text\"\n\ntext default\n--9051914041544843365972754266\nContent-Disposition: form-data; name=\"file1\"; filename=\"a.txt\"\nContent-Type: text/plain\n\nContent of a.txt.\n\n--9051914041544843365972754266\nContent-Disposition: form-data; name=\"file2\"; filename=\"a.html\"\nContent-Type: text/html\n\n<!DOCTYPE html><title>Content of a.html.</title>\n\n--9051914041544843365972754266--`);\n\n        const parser = new MultipartParser();\n\n        const result = parser.parseDataView(boundary, dataview).parts;\n\n        expect(result).toHaveLength(3);\n        expect(result[0]!.headers).toHaveLength(1);\n        expect(result[0]!.headers[0]!.name).toEqual('content-disposition');\n        expect(result[0]!.headers[0]!.value).toEqual('form-data; name=\"text\"');\n\n        expect(result[1]!.headers).toHaveLength(2);\n        expect(result[1]!.headers[0]!.name).toEqual('content-disposition');\n        expect(result[1]!.headers[0]!.value).toEqual('form-data; name=\"file1\"; filename=\"a.txt\"');\n        expect(result[1]!.headers[1]!.name).toEqual('content-type');\n        expect(result[1]!.headers[1]!.value).toEqual('text/plain');\n\n        expect(result[2]!.headers).toHaveLength(2);\n        expect(result[2]!.headers[0]!.name).toEqual('content-disposition');\n        expect(result[2]!.headers[0]!.value).toEqual('form-data; name=\"file2\"; filename=\"a.html\"');\n        expect(result[2]!.headers[1]!.name).toEqual('content-type');\n        expect(result[2]!.headers[1]!.value).toEqual('text/html');\n    });\n});\n\ndescribe('splitPartHeaderAndBody', () => {\n    test('test1', () => {\n        const part = asciiToDataViewForTesting(`Content-Disposition: form-data; name=\"file2\"; filename=\"b.html\"\n\ntest2-1234\n`);\n        const { headers, content } = __testing!.splitPartHeaderAndBody(part);\n\n        expect(headers).toEqual('Content-Disposition: form-data; name=\"file2\"; filename=\"b.html\"');\n\n        const decoder = new TextDecoder();\n        const decoded = decoder.decode(content);\n\n        const expectedString = 'test2-1234\\r\\n';\n        expect(decoded).toHaveLength(expectedString.length);\n        expect(decoded).toEqual(expectedString);\n    });\n});"],
  "mappings": ";;;;;;;;;;;;;;;;;;AACA,qBAAuC;AACvC,sBAA6F;AAC7F,6BAA2C;AAE3C,6BAAS,SAAS,MAAM;AACpB,2BAAK,YAAY,MAAM;AACnB,UAAM,WAAW;AAEjB,UAAM,WAAW,+CAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmB3C,UAAM,SAAS,IAAI;AAEnB,UAAM,SAAS,OAAO,cAAc,UAAU,UAAU;AAExD,+BAAO,QAAQ,aAAa;AAC5B,+BAAO,OAAO,GAAI,SAAS,aAAa;AACxC,+BAAO,OAAO,GAAI,QAAQ,GAAI,MAAM,QAAQ;AAC5C,+BAAO,OAAO,GAAI,QAAQ,GAAI,OAAO,QAAQ;AAE7C,+BAAO,OAAO,GAAI,SAAS,aAAa;AACxC,+BAAO,OAAO,GAAI,QAAQ,GAAI,MAAM,QAAQ;AAC5C,+BAAO,OAAO,GAAI,QAAQ,GAAI,OAAO,QAAQ;AAC7C,+BAAO,OAAO,GAAI,QAAQ,GAAI,MAAM,QAAQ;AAC5C,+BAAO,OAAO,GAAI,QAAQ,GAAI,OAAO,QAAQ;AAE7C,+BAAO,OAAO,GAAI,SAAS,aAAa;AACxC,+BAAO,OAAO,GAAI,QAAQ,GAAI,MAAM,QAAQ;AAC5C,+BAAO,OAAO,GAAI,QAAQ,GAAI,OAAO,QAAQ;AAC7C,+BAAO,OAAO,GAAI,QAAQ,GAAI,MAAM,QAAQ;AAC5C,+BAAO,OAAO,GAAI,QAAQ,GAAI,OAAO,QAAQ;AAAA;AAAA;AAIrD,6BAAS,0BAA0B,MAAM;AACrC,2BAAK,SAAS,MAAM;AAChB,UAAM,OAAO,+CAA0B;AAAA;AAAA;AAAA;AAIvC,UAAM,EAAE,SAAS,YAAY,iCAAW,uBAAuB;AAE/D,+BAAO,SAAS,QAAQ;AAExB,UAAM,UAAU,IAAI;AACpB,UAAM,UAAU,QAAQ,OAAO;AAE/B,UAAM,iBAAiB;AACvB,+BAAO,SAAS,aAAa,eAAe;AAC5C,+BAAO,SAAS,QAAQ;AAAA;AAAA;",
  "names": []
}
